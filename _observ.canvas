{
	"nodes":[
		{"id":"e94890f1b933f86b","type":"text","text":"# OBS-STUDIO","x":-53,"y":-193,"width":465,"height":153},
		{"id":"b4da858dad015cc4","type":"text","text":"# Websocket Server ","x":-124,"y":40,"width":604,"height":124},
		{"id":"5001e8c8f4930030","type":"text","text":"`* 'Remote' Controls OBS Through Websockets.`","x":-30,"y":164,"width":416,"height":161},
		{"id":"7db4416ff2c8ef9d","type":"text","text":"# Client \nto actually control it.","x":640,"y":164,"width":400,"height":204},
		{"id":"f8958c695ecf7e66","type":"text","text":"# OBSERV\nOBS + (Websocket) SERVer\nAnd notably, to control it.","x":1160,"y":162,"width":556,"height":206},
		{"id":"53b2262ef67ea5c4","type":"text","text":"# What it actually does. \nIt grabs the automatically generated json from the \"protocol\" defined by the websocket server.  re: https://github.com/obsproject/obs-websocket/blob/master/docs/generated/protocol.json","x":1287,"y":402,"width":793,"height":398},
		{"id":"8ed1808a30cab25b","type":"text","text":"Then automatically converts (or \"generates\" via gens.rkt) usable Racket code (ie: s-expressions) as auto.rkt that can called as-is or built on-top of. And the latter, we build the \"api.rkt\" on. ","x":1438,"y":840,"width":1042,"height":240},
		{"id":"eb6c13ae905fe42a","type":"text","text":"And the point? \nYou can script OBS-Studio to \"do whatever\". ","x":1600,"y":1080,"width":880,"height":160},
		{"id":"3f3dc3572a09cac7","type":"text","text":"\n# Wider Api\n\nWe want to cover a solid chunk of total requestable stuff \"eventually\" (tm). But will come with time... because we are basically just adding stuff as-needed rn.","x":5120,"y":541,"width":884,"height":599},
		{"id":"e98bfb4ecb8c41cf","type":"text","text":"# Things I Want.\n##### In Very Loose / Not-So Particular Order.","x":5966,"y":200,"width":1152,"height":221,"color":"2"},
		{"id":"20e20a5db83398fc","type":"text","text":"\n# Test suite.\n","x":6100,"y":541,"width":884,"height":599},
		{"id":"1da74451c805bcbf","type":"text","text":"\n# Actual security.\n\nWe want to get password auth working. But for local connection, even non-funneled tailscale I think this should be \"fine\" for now.\n\n  \n","x":7071,"y":541,"width":889,"height":599},
		{"id":"3c363aa9288aa3c9","type":"text","text":"# Talk Tuah \n### (ie: Service Integration)\n\nBunch of other services, Twitch x Discord (or at least to [Bandbit](https://github.com/megalisp/bandbit)) namely for my usecase maybe eventually youtube, rumble, kick,etc.","x":7076,"y":1240,"width":889,"height":599},
		{"id":"b0c53ff22067381b","type":"text","text":"# Logging.\n\nWe should be able to log anything / everything that gets entered into the repl. Right now we just are grabbing incoming-json (storing in a global var) and pooping it out to a \"log file\".\n\n  ","x":5125,"y":1240,"width":884,"height":599},
		{"id":"eb8c2ac750539883","type":"text","text":"\n# Pull'ing\n\nAdd a nice, easy, idiomatic way to 'pull' information from the json we recieve.\n\nWant to basically have it be easily to respond to\n\n  ","x":6103,"y":1240,"width":889,"height":599},
		{"id":"322134e351ecb558","type":"text","text":"\n\n# GUI & Friends.\n\nHave something adjacent to 'Mix It Up' & Others. I also basically want a \"key macro\" based stream-deck adjacent thingy. ","x":7076,"y":1960,"width":889,"height":599},
		{"id":"5b0f935f0051ced6","type":"text","text":"\n# Media player controller.\n\nNeed to see how viable using 'media source' is to essentially make a media-player around it.\n\n  \n\nIdeally I don't want any depends outside OBS itself and Racket; But MPV and Playerctl is on thet table / possible if\n\nI can't really get what I want ... but I'm somewhat optimistic I can.","x":6108,"y":1960,"width":884,"height":599},
		{"id":"569571db7f8c08c6","type":"text","text":"\n# Threading \n#### Multiple Clients\n\nYou can connect multiple clients at a time to OBS, so we should have a threading model that doesn't lock up the repl for longer-tasks. Should be able to trivially call and effectively just makes a new client\n\n  ","x":5125,"y":1960,"width":884,"height":599},
		{"id":"b5ba709c04f7d4f5","type":"text","text":"\n  \n\n# Workflows.\n\nRight now, unless you know Racket I still think it's fairly hard to get\n","x":7081,"y":2640,"width":884,"height":631},
		{"id":"2673edfa24af51f2","x":2920,"y":-360,"width":1800,"height":1080,"type":"text","text":"# Observ\n\n  \n\n> A comprehensive Racket library for controlling OBS Studio via WebSocket\n\n  \n\n[![License: Apache 2.0 OR MIT](https://img.shields.io/badge/License-Apache%202.0%20OR%20MIT-blue.svg)](https://opensource.org/licenses/Apache-2.0)\n\n[![Racket](https://img.shields.io/badge/Racket-8.0+-blue.svg)](https://racket-lang.org/)\n\n  \n\nObserv is a powerful Racket library that provides complete control over OBS Studio through its WebSocket API. Perfect for streamers, content creators, and automation enthusiasts who want to programmatically control their broadcasting setup.\n\n  \n\n## ‚ú® Features\n\n  \n\n- **38 Complete OBS Functions** - Control every aspect of OBS Studio\n\n- **Functional Design** - Clean, composable functions with proper error handling\n\n- **Parameter Architecture** - Automatic connection management via `current-conn`\n\n- **Macro System** - Powerful `define-obs-api` macro for custom functions\n\n- **REPL Integration** - Interactive development with enhanced REPL\n\n- **Workflow Automation** - Built-in support for complex streaming workflows\n\n- **Comprehensive Tests** - Full RackUnit test suite with 18+ test cases\n\n  \n\n## üöÄ Quick Start\n\n  \n\n```racket\n\n#lang racket\n\n(require observ)\n\n  \n\n;; Connect to OBS\n\n(connect-obs)\n\n  \n\n;; Check OBS version\n\n(obs!version)\n\n  \n\n;; List available scenes\n\n(obs!scene-list)\n\n  \n\n;; Switch to a scene\n\n(obs!scene-switch #:to \"Main Scene\")\n\n  \n\n;; Start recording\n\n(obs!record-start)\n\n```\n\n  \n\n## üì¶ Installation\n\n  \n\n### Requirements\n\n  \n\n- Racket 8.0 or higher\n\n- OBS Studio 28.0+ with WebSocket plugin enabled\n\n- Network access to OBS WebSocket server (default: localhost:4455)\n\n  \n\n### From Source\n\n  \n\n```bash\n\ngit clone https://github.com/megalisp/observ.git\n\ncd observ\n\nraco pkg install\n\n```\n\n  \n\n### OBS Setup\n\n  \n\n1. Open OBS Studio\n\n2. Go to **Tools ‚Üí WebSocket Server Settings**\n\n3. Enable the WebSocket server\n\n4. Note the server port (default: 4455)\n\n5. Set authentication if desired\n\n  \n\n## üéÆ Usage Examples\n\n  \n\n### Basic Control\n\n  \n\n```racket\n\n;; Scene management\n\n(obs!scene-list)\n\n(obs!scene-switch #:to \"Gaming Scene\")\n\n(obs!scene-create #:name \"New Scene\")\n\n  \n\n;; Audio control\n\n(obs!audio-mute #:input \"Desktop Audio\")\n\n(obs!audio-set-volume #:input \"Mic/Aux\" #:level 0.8)\n\n  \n\n;; Recording/Streaming\n\n(obs!record-start)\n\n(obs!stream-start)\n\n```\n\n  \n\n### Workflow Automation\n\n  \n\n```racket\n\n(define (go-live #:countdown [countdown 5])\n\n;; Pre-stream setup\n\n(obs!scene-switch #:to \"Starting Soon\")\n\n(obs!audio-unmute #:input \"Mic/Aux\")\n\n(obs!virtualcam-start)\n\n;; Countdown\n\n(for ([i (in-range countdown 0 -1)])\n\n(printf \"Going live in ~a...\\n\" i)\n\n(obs!sleep #:secs 1))\n\n;; Go live!\n\n(obs!scene-switch #:to \"Live Scene\")\n\n(obs!stream-start)\n\n(printf \"üî¥ LIVE!\\n\"))\n\n  \n\n;; Usage\n\n(go-live #:countdown 3)\n\n```\n\n  \n\n### Interactive REPL\n\n  \n\n```bash\n\n# Start the interactive OBS REPL\n\n./main.rkt\n\n  \n\n# Or from Racket REPL:\n\n> (require observ/repl)\n\n> (connect-obs)\n\n> (obs!version)\n\n```\n\n  \n\n### Custom Functions with Macros\n\n  \n\n```racket\n\n(define-obs-api (obs!stream-setup #:scene scene #:mic-level level)\n\n'(#:scene #:mic-level)\n\n\"Complete streaming setup workflow\"\n\n(obs!scene-switch #:to scene)\n\n(obs!audio-unmute #:input \"Mic/Aux\")\n\n(obs!audio-set-volume #:input \"Mic/Aux\" #:level level)\n\n(obs!virtualcam-start)\n\n(format \"Stream ready on scene: ~a\" scene))\n\n  \n\n;; Use your custom function\n\n(obs!stream-setup #:scene \"Gaming\" #:mic-level 0.75)\n\n```\n\n  \n\n## ÔøΩ Examples\n\n  \n\nObserv includes comprehensive examples in the `examples/` directory to help you get started quickly:\n\n  \n\n### Available Examples\n\n  \n\n| Example | Description | Use Case |\n\n|---------|-------------|----------|\n\n| **`quick-stream-setup.rkt`** | Rapid streaming setup with webcam and screen capture | New streamers |\n\n| **`gaming-stream.rkt`** | Gaming scenes with capture, facecam, and chat | Gaming content |\n\n| **`presentation-mode.rkt`** | Presentation and coding tutorial scenes | Educators/Speakers |\n\n| **`simple-recorder.rkt`** | Recording setup with countdown functionality | Content creation |\n\n| **`audio-mixer.rkt`** | Audio control with preset configurations | Audio management |\n\n| **`stream-automation.rkt`** | Complete automated streaming workflow | Professional streaming |\n\n| **`scene-switcher.rkt`** | Quick scene switching with hotkey-like functions | Live stream control |\n\n| **`content-creator.rkt`** | Tools for tutorials and educational content | Content creators |\n\n| **`browser-megalisp.rkt`** | Browser source integration demo | Web content |\n\n| **`examples-index.rkt`** | Overview and quick loader for all examples | Getting started |\n\n  \n\n### Using Examples\n\n  \n\nLoad any example into your REPL session:\n\n  \n\n```racket\n\n;; From the main REPL\n\n(obs!load #:file \"examples/quick-stream-setup.rkt\")\n\n  \n\n;; Or load the examples index for an overview\n\n(obs!load #:file \"examples/examples-index.rkt\")\n\n```\n\n  \n\n### Example Features\n\n  \n\n- **üéØ Practical Use Cases** - Real-world streaming and recording scenarios\n\n- **üõ†Ô∏è Ready-to-Use Functions** - Pre-built workflows you can use immediately\n\n- **üìñ Educational** - Learn OBS automation patterns and best practices\n\n- **üîß Customizable** - Easy to modify for your specific setup\n\n- **‚ö° Quick Start** - Get up and running in seconds\n\n  \n\nStart with `examples-index.rkt` to see all available examples and their quick-load functions!\n\n  \n\n## ÔøΩüìö API Reference\n\n  \n\n### Core Functions\n\n  \n\n| Category | Functions |\n\n|----------|-----------|\n\n| **Info** | `obs!version`, `obs!stats` |\n\n| **Scenes** | `obs!scene-list`, `obs!scene-switch`, `obs!scene-create` |\n\n| **Audio** | `obs!audio-mute`, `obs!audio-set-volume`, `obs!audio-get-volume` |\n\n| **Recording** | `obs!record-start`, `obs!record-stop`, `obs!record-toggle` |\n\n| **Streaming** | `obs!stream-start`, `obs!stream-stop`, `obs!stream-toggle` |\n\n| **Virtual Cam** | `obs!virtualcam-start`, `obs!virtualcam-stop` |\n\n| **Utilities** | `obs!sleep`, `obs!load` |\n\n  \n\n### Connection Management\n\n  \n\n```racket\n\n;; Connect with custom options\n\n(connect-obs #:host \"localhost\"\n\n#:port 4455\n\n#:password \"secret\"\n\n#:auto-record? #t\n\n#:auto-scene \"Main Scene\")\n\n  \n\n;; Current connection parameter\n\n(current-conn) ; Get current connection\n\n(current-conn new-conn) ; Set connection\n\n```\n\n  \n\n## üß™ Testing\n\n  \n\nRun the comprehensive test suite:\n\n  \n\n```bash\n\nracket test.rkt\n\n```\n\n  \n\nResults show all 38 functions tested across 5 categories:\n\n- ‚úÖ Function Existence (9 test cases)\n\n- ‚úÖ Arity Validation (3 test cases)\n\n- ‚úÖ Parameter System (2 test cases)\n\n- ‚úÖ Function Count (2 test cases)\n\n- ‚úÖ Integration (2 test cases)\n\n  \n\n## üìñ Documentation\n\n  \n\nFull documentation available in the included Scribble manual:\n\n  \n\n```bash\n\nraco scribble manual.scrbl\n\n```\n\n  \n\n## ü§ù Contributing\n\n  \n\nContributions welcome! Observ is open source under Apache 2.0 OR MIT license.\n\n  \n\n- **Report bugs**: [GitHub Issues](https://github.com/megalisp/observ/issues)\n\n- **Submit PRs**: [GitHub Pull Requests](https://github.com/megalisp/observ/pulls)\n\n- **Improve docs**: Documentation improvements always appreciated\n\n  \n\n## üìÑ License\n\n  \n\nCopyright ¬© 2025 megalisp\n\n  \n\nLicensed under either of:\n\n- [Apache License, Version 2.0](LICENSE-APACHE)\n\n- [MIT License](LICENSE-MIT)\n\n  \n\nat your option.\n\n  \n\n## üéØ Why Observ?\n\n  \n\n- **Comprehensive**: All 38 major OBS functions covered\n\n- **Reliable**: Comprehensive test suite ensures stability\n\n- **Extensible**: Macro system for custom workflows\n\n- **Interactive**: REPL integration for live development\n\n- **Functional**: Clean, composable design\n\n- **Well-documented**: Complete manual and examples\n\n  \n\nPerfect for:\n\n- üéÆ **Streamers** - Automate scene switching and audio control\n\n- üé• **Content Creators** - Programmatic recording workflows\n\n- üîß **Developers** - Integration with streaming applications\n\n- ü§ñ **Automation** - Complex broadcast automation systems\n\n  \n\n---\n\n  \n\n**Ready to take control of your OBS setup? Get started with Observ today!** üöÄ"},
		{"id":"a92fb9b8181b9172","x":3100,"y":-510,"width":598,"height":150,"type":"text","text":"# Old readme."}
	],
	"edges":[
		{"id":"933ed15e8e71badb","fromNode":"e94890f1b933f86b","fromSide":"bottom","toNode":"b4da858dad015cc4","toSide":"top"},
		{"id":"15bf10fdf18c1ae3","fromNode":"b4da858dad015cc4","fromSide":"top","toNode":"e94890f1b933f86b","toSide":"bottom"},
		{"id":"763a0d701b211795","fromNode":"b4da858dad015cc4","fromSide":"right","toNode":"7db4416ff2c8ef9d","toSide":"left"},
		{"id":"8715e3aebc8b67a6","fromNode":"7db4416ff2c8ef9d","fromSide":"right","toNode":"f8958c695ecf7e66","toSide":"left"}
	]
}